\input texinfo
@documentencoding ISO-8859-1
@setfilename gpgol.info
@include version.texi
@settitle The GpgOL Technical Manual

@dircategory GnuPG Plugin
@direntry
* gpgol: (gpgol).              An Outlook Plugin for GnuPG.
@end direntry

@macro clnt
  @sc{c:} @c
@end macro
@macro srvr
  @sc{s:} @c
@end macro



@c Unify some of the indices.
@syncodeindex tp fn
@syncodeindex pg fn

@copying
This is @cite{The GpgOL Technical Manual} for @acronym{GpgOL} (version
@value{VERSION}, @value{UPDATED-MONTH}).

@iftex
Published by g10 Code GmbH@*
Hüttenstr. 61@*
40699 Erkrath, Germany
@end iftex

Copyright @copyright{} 2007 g10 Code GmbH

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 3 of the License, or (at your
option) any later version. The text of the license can be found in the
section entitled ``Copying''.
@end quotation
@end copying

@c
@c Titlepage
@c
@setchapternewpage odd
@titlepage 
@title The GpgOL Technical Manual
@subtitle Version @value{VERSION}
@subtitle @value{UPDATED-MONTH}

@sp 3

@sp 3

@author Werner Koch (@email{wk@@gnupg.org})

@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@ifnothtml
@contents
@page
@end ifnothtml

@c @ifhtml
@c @center @image{logo}
@c @end ifhtml

@ifnottex
@node Top
@top 

@insertcopying

@noindent
This file documents @acronym{GpgOL}; a GnuPG plugin for Microsoft's
Outlook MUA.
@end ifnottex


@menu
* Introduction::                How to use this manual.
* Assuan Protocol::             Description of the UI server protocol.
* MAPI Properties::             MAPI Properties used by GpgOL.
* Registry Settings::           How GpgOL uses the Registry.

Appendices

* Copying::                     The GNU General Public License says how you
                                can copy and share this manual.

Indices

* Concept Index::               Index of concepts and programs.
* Function and Data Index::     Index of functions, variables and data types.

@end menu

@ifhtml
@page
@summarycontents
@contents
@end ifhtml

@c
@c  I N T R O
@c
@node Introduction
@chapter Introduction

To debug GpgOL you should set the Registry entry
@code{HKCU\Software\Gnu\GpgOL:enableDebug} to the string value @code{1}:

@cartouche
@example
[HKEY_CURRENT_USER\Software\GNU\GpgOL]
"enableDebug"="1"
@end example
@end cartouche

This allows easy setting of a debug file by using the extended options
menu and enables a few extra menu items.


@c
@c  P R O T O C O L  D E S C R I P T I O N
@c
@node Assuan Protocol
@chapter Description of the UI Server Protocol

This section describes the protocol used between @acronym{GpgOL} and the
User Interface Server (UI server).  All cryptographic operations are
done by this server and the server is responsible for all dialogs.  If a
a server is not available, @acronym{GpgOL} can only use a very limited
internal crypto server.

We assume that the connection has already been established; see the
Assuan manual for details.

@menu
* ENCRYPT::                  Encrypt a message.
* SIGN::                     Sign a message.
* DECRYPT::                  Decrypt a message.
* VERIFY::                   Verify a message.
* Miscellaneous Commands::   Commands not related to a specific operation.
@end menu



@node ENCRYPT
@section Encrypt a Message

Before encryption can be done the recipients must be set using the
command:

@deffn Command RECIPIENT @var{string}

Set the recipient for the encryption.  @var{string} is an RFC-2822
recipient name ("mailbox" as per section 3.4).  This command may or may
not check the recipient for validity right away; if it does not all
recipients are expected to be checked at the time of the @code{ENCRYPT}
command.  All @code{RECIPIENT} commands are cumulative until a
successful @code{ENCRYPT} command or until a @code{RESET} command.
Linefeeds are obviously not allowed in @var{string} and should be folded
into spaces (which are equivalent).
@end deffn

@noindent
To tell the server the source and destination of the data, the next two
commands are to be used:

@deffn Command INPUT FD=@var{n}
Set the file descriptor for the message to be encrypted to @var{n}.  The
message send to the server is binary encoded. 

GpgOL is a Windows only program, thus @var{n} is not a libc file
descriptor but a regular system handle.  Given that the Assuan
connection works over a socket, it is not possible to use regular
inheritance to make the file descriptor available to the server.
Thus @code{DuplicateHandle} needs to be used to duplicate a handle
to the server process.  This is the reason that the server needs to
implement the @code{GETINFO pid} command.  Sending this command a second
time replaces the file descriptor set by the last one.
@c If @var{n} is not given, this commands uses the
@c %last file descriptor passed to the application.
@c %@xref{fun-assuan_sendfd, ,the assuan_sendfd function,assuan,the
@c %Libassuan manual}, on how to do descriptor passing.
@end deffn

@deffn Command OUTPUT FD=@var{n}
Set the file descriptor to be used for the output (i.e. the encrypted
message) to @var{n}.  For OpenPGP, the output needs to be ASCII armored;
for CMS, the output needs to be Base-64 encoded.  For details on the
file descriptor, see the @code{INPUT} command.
@end deffn

@noindent  
The setting of the recipients, the data source and destination may
happen in any order, even intermixed.  If this has been done the actual
encryption operation is called using:

@deffn Command ENCRYPT -@w{}-protocol=@var{name}

This command reads the plaintext from the file descriptor set by the
@code{INPUT} command, encrypts it and writes the ciphertext to the file
descriptor set by the @code{OUTPUT} command.  The server may (and
should) overlap reading and writing.  The recipients used for the
encryption are all the recipients set so far.  If any recipient is not
usable the server should take appropriate measures to notify the user
about the problem and may cancel the operation by returning an error
code.  The used file descriptors are void after this command; the
recipient list is only cleared if the server returns success.

@noindent
Because GpgOL uses a streaming mode of operation the server is not
allowed to auto select the protocol and must obey to the mandatory
@var{protocol} parameter:

@table @code
@item OpenPGP
Use the OpenPGP protocol (RFC-2440).
@item CMS
Use the CMS (PKCS#7) protocol (RFC-3852).
@end table

@end deffn

To support automagically selection of the protocol depending on the
selected keys, the server may implement the follwoing extra command:

@deffn Command PREP_ENCRYPT [-@w{}-protocol=@var{name}]

This commands considers all recipients set so far and decides whether it
is able to take input and start the actual decryption.  This is kind of
a dry-run @command{ENCRYPT} without requiring or using the input and
output file descriptors.  The server shall cache the result of any user
selection to avoid asking this again when the actual @command{ENCRYPT}
command is send.  The @option{--protocol} option is optional; if it is
not given, the server should allow the user to select the protocol to be
used based on the recipients given or by any other means.

If this command is given again before a successful @command{ENCRYPT}
command, the second one takes effect. 

Before sending the OK response the server shall tell the client the
protocol to be used (either the one given by the argument or the one
selected by the user) by means of a status line:
@end deffn

@deffn {Status line} PROTOCOL @var{name}
Advise the client to use the protocol @var{name} for the
@command{ENCRYPT} command.  The valid protocol names are listed under
the description of the @command{ENCRYPT} command.  The server shall emit
exactly one PROTOCOL status line.
@end deffn

@noindent
Here is an example of a complete encryption sequence; client lines are
indicated by a @sc{c:}, server responses by @sc{c:}:

@smallexample
@group
  @clnt RESET
  @srvr OK
  @clnt RECIPIENT foo@@example.net
  @srvr OK
  @clnt RECIPIENT bar@@example.com
  @srvr OK
  @clnt PREP_ENCRYPT
  @srvr S PROTOCOL OpenPGP
  @srvr OK
  @clnt INPUT FD=17
  @srvr OK
  @clnt OUTPUT FD=18
  @srvr OK
  @clnt ENCRYPT
  @srvr OK
@end group
@end smallexample



@node SIGN
@section Sign a Message

The server needs to implement opaque signing as well as detached
signing.  Due to the nature of OpenPGP message it is always required to
send the entire message to the server; sending just the hash is not
possible.  The following two commands are required to set the input and
output file descriptors:

@deffn Command INPUT FD=@var{n}
Set the file descriptor for the message to be signed to @var{n}.  The
message send to the server is binary encoded.  For details on the file
descriptor, see the description of @code{INPUT} in the @code{ENCRYPT}
section.
@end deffn

@deffn Command OUTPUT FD=@var{n}
Set the file descriptor to be used for the output.  The output is either
the complete signed message or in case of a detached signature just that
detached signature.  For OpenPGP, the output needs to be ASCII armored;
for CMS, the output needs to be Base-64 encoded.  For details on the
file descriptor, see the @code{INPUT} command.
@end deffn

@noindent
To allow the server the selection of a non-default signing key the
client may optionally use the command:

@deffn Command SENDER @var{email}
@var{email} is the plain ASCII encoded address ("addr-spec" as per
RFC-2822) enclosed in angle brackets.  The address set with this command
is valid until a successful @code{SIGN} command or until a @code{RESET}
command.  A second command overrides the effect of the first one; if
@var{email} is not given the server shall use the default signing key.
@end deffn

@noindent
The signing operation is then initiated by:

@deffn Command SIGN -@w{}-protocol=@var{name} [-@w{}-detached] 
Sign the data set with the @code{INPUT} command and write it to the sink
set by OUTPUT.  @var{name} is the signing protocol used for the
message. For a description of the allowed protocols see the
@code{ENCRYPT} command.  With option @code{--detached} given, a detached
signature is created; this is actually the usual way the command is
used.
@end deffn

@noindent
The client expects the server to send at least this status information
before the final OK response:

@deffn {Status line} MICALG @var{string}
The @var{string} represents the hash algorithm used to create the
signature. It is used with MOSS style signature messages and defined by
PGP/MIME (RFC-3156) and S/MIME (RFC-3851).  The GPGME library has a
supporting function @code{gpgme_hash_algo_name} to return the algorithm
name as a string.  This string needs to be lowercased and for OpenPGP
prefixed with "@code{pgp-}".
@end deffn



@node DECRYPT
@section Decrypt a Message

Decryption may include the verification of OpenPGP messages.  This is
due to the often used combined signing/encryption modus of OpenPGP.  The
client may pass an option to the server to inhibit the signature
verification.  The following two commands are required to set the input
and output file descriptors:

@deffn Command INPUT FD=@var{n}
Set the file descriptor for the message to be decrypted to @var{n}.  The
message send to the server is either binary encoded or --- in the case
of OpenPGP --- ASCII armored.  For details on the file descriptor, see
the description of @code{INPUT} in the @code{ENCRYPT} section.
@end deffn

@deffn Command OUTPUT FD=@var{n}
Set the file descriptor to be used for the output. The output is binary
encoded. For details on the file descriptor, see the description of
@code{INPUT} in the @code{ENCRYPT} section.
@end deffn

@noindent
The decryption is started with the command:

@deffn Command DECRYPT -@w{}-protocol=@var{name} [-@w{}-no-verify]
@var{name} is the encryption protocol used for the message. For a
description of the allowed protocols see the @code{ENCRYPT} command.
This argument is mandatory.  If the option @option{--no-verify} is given,
the server should not try to verify a signature, in case the input data
is an OpenPGP combined message.
@end deffn


@node VERIFY
@section Verify a Message

The server needs to support the verification of opaque signatures as
well as detached signatures.  The kind of input sources controls what
kind message is to be verified. 

@deffn Command MESSAGE FD=@var{n}
This command is used with detached signatures to set the file descriptor
for the signed data to @var{n}. The data is binary encoded (used
verbatim).  For details on the file descriptor, see the description of
@code{INPUT} in the @code{ENCRYPT} section.
@end deffn

@deffn Command INPUT FD=@var{n}
Set the file descriptor for the opaque message or the signature part of
a detached signature to @var{n}.  The message send to the server is
either binary encoded or -- in the case of OpenPGP -- ASCII armored.
For details on the file descriptor, see the description of @code{INPUT}
in the @code{ENCRYPT} section.
@end deffn

@deffn Command OUTPUT FD=@var{n}
Set the file descriptor to be used for the output. The output is binary
encoded and only used for opaque signatures.  For details on the file
descriptor, see the description of @code{INPUT} in the @code{ENCRYPT}
section.
@end deffn

@noindent
The verification is then started using:

@deffn Command VERIFY -@w{}-protocol=@var{name} [-@w{}-silent]
@var{name} is the signing protocol used for the message. For a
description of the allowed protocols see the @code{ENCRYPT} command.
This argument is mandatory.  Depending on the combination of
@code{MESSAGE} @code{INPUT} and @code{OUTPUT} commands, the server needs
to select the appropriate verification mode:

@table @asis
@item MESSAGE and INPUT
This indicates a detached signature.  Output data is not applicable.
@item INPUT 
This indicates an opaque signature.  As no output command has been given,
the server is only required to check the signature.
@item INPUT and OUTPUT
This indicates an opaque signature.  The server shall write the signed
data to the file descriptor set by the output command.  This data shall
even be written if the signatures can't be verified.
@end table
@end deffn

With @option{--silent} the server shall not display any dialog; this is
for example used by the client to get the content of opaque signed
messages. The client expects the server to send at least this status
information before the final OK response:

@deffn {Status line} SIGSTATUS @var{flag} @var{displaystring}
Returns the status for the signature and a short string explaining the
status.  Valid values for @var{flag} are:

@table @code
@item none
The message has a signature but it could not not be verified due to a
missing key.
@item green
The signature is fully valid.
@item yellow
The signature is valid but additional information was shown regarding the
validity of the key.
@item red
The signature is not valid. 
@end table

@var{displaystring} is a percent-and-plus-encoded string with a short
human readable description of the status.  For example

@smallexample
S SIGSTATUS green Good+signature+from+Keith+Moon+<keith@@example.net>
@end smallexample

Note that this string needs to fit into an Assuan line and should be
short enough to be displayed as short one-liner on the clients window.
As usual the encoding of this string is UTF-8 and it should be send in
its translated form.

The server shall send one status line for every signature found on the
message.


@end deffn



@c
@c M I S C E L L A N E O U S  C O M M A N D S
@c
@node Miscellaneous Commands
@section Miscellaneous Commands

The server needs to implement the following commands which are not
related to a specific command:

@deffn Command GETINFO @var{what}
This is a multi purpose command, commonly used to return a variety of
information.  The required subcommands as described by the @var{what}
parameter are:

@table @code
@item pid
Return the process id of the server in decimal notation using an Assuan
data line.
@end table
@end deffn


@noindent
To allow the server to pop up the windows in the correct relation to the
client, the client is advised to tell the server by sending the option:

@deffn {Command option} window-id @var{number} 
The @var{number} represents the native window ID of the clients current
window.  On Windows systems this is a windows handle (@code{HWND}) and
on X11 systems it is the @code{X Window ID}.  The number needs to be
given as a hexadecimal value so that it is easier to convey pointer
values (e.g. @code{HWND}).
@end deffn


@noindent
GpgOL features a button to invoke the certificate manager.  To do this
it uses the Assuan command:

@deffn Command START_KEYMANAGER
The server shall pop up the main window of the key manager (aka
certificate manager).  The client expects that the key manger is brought
into the foregound and that this command immediatley returns (does not
wait until the key manager has been fully brought up).
@end deffn

@c xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
@c
@c  M A P I  P r o p e r t i e s
@c
@c xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
@node MAPI Properties
@chapter MAPI Properties used by GpgOL

GpgOL uses a some custom MAPI properties in the named properties range.
Thus their actual numbers are determined at runtime and only the names
should be used.  The GUID assigned to these properties is
@code{31805ab8-3e92-11dc-879c-00061b031004}.

@table @code

@item GpgOL Attach Type
This is a property of type LONG and used to further describe the
attachments created by GpgOL.  These values are used:

  @table @asis
  @item ATTACHTYPE_MOSS = 1
  The attachment contains the original MOSS message.  That is either an
  S/MIME or a PGP/MIME message in its original RFC-2822 format (but only
  with the relevant MIME parts of the main header).

  @item ATTACHTYPE_FROMMOSS = 2
  The attachment has been created from the original MOSS attachment.  It
  will automagically be recreated as needed.  If the atatchment has
  been created from an encrypted message, it is saved re-encrypted under
  a non-permanent session key.  This session key is valid as long as the
  current Outlook porcess exists.

  @item ATTACHTYPE_MOSSTEMPL = 3
  The attachment has been created in the course of sending a message.
  @end table

@item GpgOL Sig Status
This is a property of type STRING8 and used to cache the result of the
last signature verification.  It is used with the actual message and
consists of a single character, a space and a human readable string
(utf-8 encoded).  The first character is used as a machine processable
flag indicating the status.  These values are defined:

  @table @code
  @item #
  The message is not of interest to us.  GpgOL may flag any message with
  this signature status to avoid extra processing for messages already
  known not to need any processing by GpgOL.

  @item @@
  The message has been created and signed or encrypted by GpgOL. 
 
  @item ?
  The signature status has not been checked.  This is for example used
  if the public key to be used for the verification could not be found.

  @item !
  The signature verified okay and is deemed to be fully valid.

  @item ~
  The signature was not fully verified.  This often means that the full
  result information of the signature verification needs to be
  considered to decide the actual validity.  Used for example if the
  signing key has expired

  @item -
  The signature is bad.  Either this means the message has been tampered
  with or an intermediate message relay has accidently changed
  the message (e.g. due to recoding).
  
  @end table

@item GpgOL Protect IV
This binary property is used to store the initialization vector of an
re-encrypted attachment.  The existence of this property indicates that
the attachment has been encrypted under the non-permanent session key.

@item GpgOL Charset
This is a property of type STRING8 and used to describe the character
set of an attachment or of the body.  If this propery is missing the
default of UTF-8 is assumed.

@item GpgOL Last Decrypted
This binary property is used on the message to save a session marker to
tell GpgOL whether the message as already been decrypted.  If this
property does not exists or the session marker does not macth the one of
the current session, GpgOL needs to decrypt it again.

@item GpgOL MIME Info
This property is of type STRING8 and used to store the MIME structure of
the orginal message.  The content are lines of colon delimited fields.
The specification has not yet been finished.

@end table


@c xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
@c
@c  R e g i s t r y  S  e t t i n g s
@c
@c xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
@node Registry Settings
@chapter How GpgOL uses the Registry

This is a list of registry entries GpgOL knows about. 

@table @code

@item HKLM\Software\GNU\GnuPG:Install Directory
This is used by GnuPG to describe the directory where GnupG has been
installed.  GpgOL requires this to get the location of the localedir
which is used to show translated strings (@file{gpgol.mo}).  It is
further used to check whether GnuPG has been installed at all.

@item HKCU\Software\GNU\GnuPG:UI Server
If the UI server could not be connected, GpgOL tries to start the one
given in this entry.  It is assumed that the UI server is stored in the
@code{Install Directory} (as described above).  This Registry entry
gives the actual command name relative to this directory.  If the key
does not exist, is is first searched below @code{HKLM} and then it
defaults to @code{bin/kleopatra.exe} (FIXME: The final name will be just
@code{kleopatra.exe}).

@item HKCU\Software\GNU\GpgOL:enableDebug
Setting this key to the string @code{1} enables a few extra features in
the UI, useful only for debugging.  Setting it to values larger than 1
make the log file output more verbose; these are actually bit flags
according to the following table (which may change with any release):
@table @code
@item 2  (0x0002)
Tell what the Assuan I/O scheduler is doing.
@item 4  (0x0004)
Even more verbose Assuan I/O scheduler reporting. 
@item 8  (0x0008)
Tell what the filter I/O system is doing.
@item 16 (0x0010)
Tell how the filter I/O locks the resources.
@item 32 (0x0020)
Tell about resource allocation.
@end table
You may use the regular C-syntax for entering the value.


@itemx HKCU\Software\GNU\GpgOL:logFile
If the value is not empty, GpgOL takes this as a log file and appends
debug information to this file.  The file may get very large.

@itemx HKCU\Software\GNU\GpgOL:compatFlags
This is a string consisting of @code{0} and @code{1} to enable certain
compatibility flags.  Not generally useful; use the source for a
description.

@item HKCU\Software\GNU\GpgOL:enableSmime   
@itemx HKCU\Software\GNU\GpgOL:defaultProtocol
@itemx HKCU\Software\GNU\GpgOL:encryptDefault
@itemx HKCU\Software\GNU\GpgOL:signDefault   
@itemx HKCU\Software\GNU\GpgOL:previewDecrypt
@itemx HKCU\Software\GNU\GpgOL:storePasswdTime
@itemx HKCU\Software\GNU\GpgOL:encodingFormat 
@itemx HKCU\Software\GNU\GpgOL:defaultKey   
@itemx HKCU\Software\GNU\GpgOL:enableDefaultKey
@itemx HKCU\Software\GNU\GpgOL:preferHtml 
These registry keys store the values from the configuration dialog.

@end table



@c xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
@c
@c   A P P E N D I X
@c 
@c xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

@include gpl.texi

@c
@c  I N D E X E S
@c
@node Concept Index
@unnumbered Concept Index
@printindex cp
@node Function and Data Index
@unnumbered Function and Data Index
@printindex fn

@bye

@c xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
@c
@c E D I T O R ' S   A T T I C
@c 
@c xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

What about the message class mangling?

* On receiving a new message GpgOL checks the MAPI message class
  property of the message and if this is an S/MIME message class
  ("IPM.Note.SMIME"), it is changed to a GpgOL specific one
  ("IPM.Note.GpgOL").  This change is required so that OL does not not
  apply its own S/MIME handler to the message but leaves it unchanged in
  the message store.

* For ease of implementarion the same thing applies to PGP messgaes,
  although OL would not touch these messages.

* When reading a message GpgOL quickly checks the message class and if
  it is "IPM.Note.GpgOL" it will hook itself into the code path and
  decrypt/verify the message.

* Messages already in the message store before GpgOL was installed are
  handled diffwerently: Here an Outlook specific event is used to change
  the message class when browsing the messages folder.  This code path
  is not fully ready as it requires the installation of an ECF(ile)
  which has to be done manually as of now.

* If GpgOL is deinstalled, the existing S/MIME messages can't be
  decrypted or verified by Outlook's internal S/MIME support.
  Multipart/signed messages are still readable, though.  We plan to add
  a little tool for changing the GpgOL message classes back to
  "IPM.Note.SMIME" which in turn allows using internal S/MIME support
  again.




@c Local Variables:
@c coding: latin-1
@c End:
